---
import { getPosts, getPostBySlug } from '../../lib/queries';
import { urlFor } from '../../lib/sanity';
import BlogPost from '../../layouts/BlogPost.astro';

interface Author {
  name: string;
  image?: {
    asset: {
      _ref: string;
    };
  };
  bio?: string;
}

interface Category {
  title: string;
}

interface SanityPost {
  title: string;
  slug: { current: string };
  excerpt?: string;
  publishedAt: string;
  mainImage?: {
    asset: {
      _ref: string;
    };
  };
  author?: Author;
  categories?: Category[];
  body?: any[];
}

export async function getStaticPaths() {
  const posts = await getPosts() as SanityPost[];
  return posts.map(post => ({
    params: { slug: post.slug.current },
    props: { post }
  }));
}

interface Props {
  post: SanityPost;
}

const { post } = Astro.props as Props;

if (!post) {
  return Astro.redirect('/404');
}

const frontmatter = {
  title: post.title,
  description: post.excerpt || post.title,
  pubDate: new Date(post.publishedAt),
  image: post.mainImage ? urlFor(post.mainImage).width(1200).url() : null,
  author: post.author?.name || 'Healthcare Team',
  category: post.categories?.[0]?.title || 'General',
  tags: post.categories?.map(cat => cat.title) || []
};

function renderContent(content) {
  if (!content) return '';
  
  return content.map(block => {
    if (block._type === 'block') {
      const style = block.style || 'normal';
      const text = block.children
        .map(child => child.text)
        .join('');
      
      switch (style) {
        case 'h1':
          return `<h1>${text}</h1>`;
        case 'h2':
          return `<h2>${text}</h2>`;
        case 'h3':
          return `<h3>${text}</h3>`;
        case 'blockquote':
          return `<blockquote>${text}</blockquote>`;
        default:
          return `<p>${text}</p>`;
      }
    }
    
    if (block._type === 'image' && block.asset) {
      return `<img src="${urlFor(block).url()}" alt="${block.alt || ''}" class="content-image" />`;
    }
    
    return '';
  }).join('\n\n');
}

const content = renderContent(post.body);
---

<BlogPost frontmatter={frontmatter}>
  <div class="post-content">
    <div set:html={content} />
  </div>

  {post.author && (
    <div class="author-bio">
      {post.author.image && (
        <img 
          src={urlFor(post.author.image).width(100).url()} 
          alt={post.author.name}
          class="author-image"
        />
      )}
      <div>
        <h3>{post.author.name}</h3>
        {post.author.bio && <p>{post.author.bio}</p>}
      </div>
    </div>
  )}
</BlogPost>

<style>
  .post-content {
    margin: 2rem 0;
    line-height: 1.8;
  }

  .content-image {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 2rem 0;
  }

  .author-bio {
    display: flex;
    gap: 1.5rem;
    padding: 2rem;
    background: #f5f5f5;
    border-radius: 8px;
    margin-top: 3rem;
    align-items: flex-start;
  }

  .author-image {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    object-fit: cover;
    flex-shrink: 0;
  }

  .author-bio h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.125rem;
  }

  .author-bio p {
    margin: 0;
    color: #666;
    font-size: 0.95rem;
  }

  @media (max-width: 768px) {
    .author-bio {
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .author-image {
      width: 80px;
      height: 80px;
    }
  }
</style>